{
  "permissions": {
    "allow": [
      "Bash(cmd /c setup.bat)",
      "Bash(python -m venv venv)",
      "Bash(venvScriptspip install -r requirements.txt)",
      "Bash(\"venv/Scripts/pip\" install -r requirements.txt)",
      "Bash(\"venv/Scripts/pip\" install --upgrade pip setuptools wheel)",
      "Bash(\"venv/Scripts/pip\" install --only-binary :all: numpy pandas)",
      "Bash(\"venv/Scripts/pip\" install pydantic --only-binary :all:)",
      "Bash(if not exist .env copy .env.example .env)",
      "Bash(cmd /c \"if not exist .env copy .env.example .env\")",
      "Bash(npm install)",
      "Bash(\"venv/Scripts/python\" -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000)",
      "Bash(npm run dev)",
      "Bash(curl -s http://localhost:8000/health)",
      "Bash(curl -s -I http://localhost:3000)",
      "Bash(\"venv/Scripts/pip\" install fastapi uvicorn[standard] beautifulsoup4 requests python-dateutil --upgrade)",
      "Bash(\"venv/Scripts/pip\" show openbb)",
      "Bash(\"venv/Scripts/pip\" install openbb)",
      "Bash(\"venv/Scripts/uvicorn\" app:app --reload --host 0.0.0.0 --port 8000)",
      "Bash(curl -s http://localhost:8000/api/health)",
      "Bash(curl -s http://localhost:8000/api/trending)",
      "Bash(curl -s \"http://localhost:8000/api/indicators/AAPL\")",
      "Bash(\"venv/Scripts/python\" -c \"from openbb import obb; print(dir(obb))\")",
      "Bash(\"venv/Scripts/pip\" install pandas-ta)",
      "Bash(curl -s http://localhost:8000/)",
      "Bash(curl -s \"http://localhost:8000/api/news/AAPL?limit=2\")",
      "Bash(curl -v \"http://localhost:8000/api/indicators/AAPL\")",
      "Bash(\"venv/Scripts/python\" test_openbb.py)",
      "Bash(\"venv/Scripts/python\" -c \"import sys; sys.path.insert(0, ''.''); from services.openbb_client import openbb_client; print(''Direct test:'',  openbb_client.get_technical_indicators(''TSLA''))\")",
      "Bash(curl -s https://api.stocktwits.com/api/2/trending/symbols.json)",
      "Bash(python3 -m json.tool)",
      "Bash(\"venv/Scripts/python\" -m json.tool)",
      "Bash(taskkill /F /IM uvicorn.exe)",
      "Bash(\"venv/Scripts/python\" -c \"from services.stocktwits_client import stocktwits_client; result = stocktwits_client.get_trending_tickers(force_refresh=True); print(f''Count: {len(result)}''); print(''First ticker:'', result[0] if result else ''None'')\")",
      "Bash(curl -s -H \"Accept: application/json\" \"https://api.stocktwits.com/api/2/trending/symbols.json\")",
      "Bash(\"venv/Scripts/python\" -c \"from services.stocktwits_client import stocktwits_client; result = stocktwits_client.get_trending_tickers(force_refresh=True); print(f''Count: {len(result)}''); print(''First 2 tickers:''); import json; print(json.dumps(result[:2], indent=2))\")",
      "Bash(\"venv/Scripts/python\" -c \"import requests; resp = requests.get(''https://api.stocktwits.com/api/2/trending/symbols.json'', headers={''User-Agent'': ''curl/7.68.0'', ''Accept'': ''application/json''}, verify=False); print(resp.status_code); print(resp.text[:200])\")",
      "Bash(\"venv/Scripts/python\" -c \"from curl_cffi import requests as curl_requests; resp = curl_requests.get(''https://api.stocktwits.com/api/2/trending/symbols.json'', impersonate=''chrome110''); print(''Status:'', resp.status_code); print(''First 300 chars:'', resp.text[:300])\")",
      "Bash(\"venv/Scripts/python\" -c \"from services.stocktwits_client import stocktwits_client; result = stocktwits_client.get_trending_tickers(force_refresh=True); print(f''Count: {len(result)}''); print(''First ticker:'', result[0][''symbol''], result[0].get(''trending_score'')) if result else print(''No results'')\")",
      "Bash(\"venv/Scripts/python\" -c \"import sys; import importlib; sys.path.insert(0, ''.''); import services.stocktwits_client; importlib.reload(services.stocktwits_client); from services.stocktwits_client import stocktwits_client; result = stocktwits_client.get_trending_tickers(force_refresh=True); print(f''Got {len(result)} tickers''); print(result[0] if result else ''None'')\")"
    ],
    "deny": [],
    "ask": []
  }
}
